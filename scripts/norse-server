#!/bin/bash

DAEMON="${NORSE_SERVER_DAEMON:-0}"
HOST="${NORSE_SERVER_HOST:-127.0.0.1}"
LOGFILE="${NORSE_SERVER_LOGFILE:-/tmp/norse-server.log}"
LOGLEVEL="${NORSE_SERVER_LOGLEVEL:-info}"
PORT="${NORSE_SERVER_PORT:-11428}"
STDOUT="${NORSE_SERVER_STDOUT:-0}"
TIMEOUT="${NORSE_SERVER_TIMEOUT:-30}"
WORKERS="${NORSE_SERVER_WORKERS:-1}"

usage() {
  echo "NORSE Server"
  echo "------------"
  echo "Usage: norse-server log|status|start|stop|restart [options]"
  echo ""
  echo "Commands:"
  echo "  log         display the server output log"
  echo "  status      display the status of all server instances"
  echo "  start       start a server instance on <HOST>:<PORT>"
  echo "  stop        stop a server instance on <HOST>:<PORT>"
  echo "  restart     restart (i.e. stop and start) a server instance on <HOST>:<PORT>"
  echo
  echo "Options:"
  echo "  -d                 daemonize the server process"
  echo "  -h <HOST>          use hostname/IP address <HOST> for the server [default: 127.0.0.1]"
  echo "  -l [critical|error|warning|info|debug|trace] log level [default: info]"
  echo "  -o                 print outputs to the console"
  echo "  -p <PORT>          use port <PORT> for opening the socket [default: 11428]"
  echo "  -t <TIMEOUT>       workers silent for more than this many seconds are killed and restarted [default: 30]"
  echo "  -w <WORKERS>       the number of worker processes for handling requests [default: 1]"

}

log() {
  # Follow info logs.
  tail -f "${LOGFILE}"
}

pid() {
  # Get process ID of instance on defined host and port.
  pgrep -f "norse_server.main:app --bind ${HOST}:${PORT}"
}

set-gunicorn_opts() {
  # Set opts for gunicorn.
  GUNICORN_OPTS="--bind ${HOST}:${PORT}"
  GUNICORN_OPTS="${GUNICORN_OPTS} --log-file ${LOGFILE}"
  GUNICORN_OPTS="${GUNICORN_OPTS} --log-level ${LOGLEVEL}"
  GUNICORN_OPTS="${GUNICORN_OPTS} --worker-class uvicorn.workers.UvicornWorker"

  [[ "${STDOUT}" -eq 0 ]] && GUNICORN_OPTS="${GUNICORN_OPTS} --capture-output"
  [[ "${DAEMON}" -eq 1 ]] && GUNICORN_OPTS="${GUNICORN_OPTS} --daemon"
  [[ "${TIMEOUT}" -ne 30 ]] && GUNICORN_OPTS="${GUNICORN_OPTS} --timeout ${TIMEOUT}"
  [[ "${WORKERS}" -gt 1 ]] && GUNICORN_OPTS="${GUNICORN_OPTS} --workers ${WORKERS}"
}

start() {
  # Start server instance.
  if pid > /dev/null;  then
    echo "Norse Server is already running at http://${HOST}:${PORT}."
  else
    echo "Norse Server is now running at http://${HOST}:${PORT}."
    if [ "${DAEMON}" -eq 0 ]; then
      echo "Use CTRL + C to stop this service."
      [[ "${STDOUT}" -eq 1 ]] && echo "------------------------------------------------------"
    fi

    set-gunicorn_opts
    exec gunicorn norse_server.main:app ${GUNICORN_OPTS}
  fi
}

status() {
  # List all processes of Norse Server.
  PGREP="$(pgrep -af "norse_server.main:app")"
  printf "PID\t\tHTTP-SOCKET\t\tLOGFILE\n"
  echo "${PGREP}" | head -n 1 | awk '{ for(i=1;i<=NF;i++) {if ( i == 1 || i == 5 || i == 7 ) printf $i"\t\t"}; printf "\n" }'
}

stop() {
  # Stop server instance.
  if pid > /dev/null; then
    kill "$(pid 2>&1 | head -n 1)"
    echo "Norse Server running at http://${HOST}:${PORT} has stopped."
  else
    echo "Norse Server is not running at http://${HOST}:${PORT}."
    false
  fi
}

# Returns the version of Norse server.
version() {
   python3 -c "from norse_server import __version__; print(__version__)"
}

# Returns the version of NORSE.
version-norse() {
   python3 -c "from norse import __version__; print(__version__)"
}

CMD=$1; shift
while getopts "dh:l:op:t:w:" opt; do
    case $opt in
        d) DAEMON=1 ;;
        h) HOST=$OPTARG ;;
        l) LOGLEVEL=$OPTARG ;;
        o) STDOUT=1 ;;
        p) PORT=$OPTARG ;;
        t) TIMEOUT=$OPTARG ;;
        w) WORKERS=$OPTARG ;;
        *) echo "Invalid option"
    esac
done

case "$CMD" in
  log) log ;;
  pid) pid ;;
  restart) stop; sleep .5; start ;;
  start)   start ;;
  status)  status ;;
  stop)    stop ;;
  version) version ;;
  version-norse) version-norse ;;
  *) usage ;;
esac